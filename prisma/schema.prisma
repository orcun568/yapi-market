generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  name        String?
  role        String        @default("user")
  phoneNumber String?
  addresses   Address[]
  cartItems   CartItem[]
  order       Order[]
  appointment Appointment[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Int
  image       String?
  isFeatured  Boolean     @default(false)
  stock       Int         @default(0)
  categoryId  Int
  cartItems   CartItem[]
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  item        OrderItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  label       String?
  fullName    String
  phoneNumber String?
  city        String
  district    String
  openAddress String
  postalCode  String?
  user        User    @relation(fields: [userId], references: [id])
  order       Order[]
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  addressId     String
  totalAmount   Int
  status        String   @default("pending")
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   String
  productId Int
  quantity  Int
  price     Int // Sipariş anındaki ürün fiyatı, değişiklikler için

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model PaintColor {
  id           Int           @id @default(autoincrement())
  name         String
  hexCode      String
  stock        Int           @default(0)
  appointments Appointment[]
}

model Appointment {
  id                   String   @id @default(cuid())
  userId               String?
  fullName             String
  email                String
  phoneNumber          String
  address              String
  paintAreaDescription String
  paintColorId         Int
  paintType            String
  appointmentDate      DateTime

  paintColor PaintColor @relation(fields: [paintColorId], references: [id])
  user       User?      @relation(fields: [userId], references: [id])
}

model Slider {
  id      Int    @id @default(autoincrement())
  image1  String
  image2  String
  image3  String
  title1  String
  title2  String
  title3  String
}

model Content {
  id             Int    @id @default(autoincrement())
  hakkimizda     String
  telefon        String
  email          String
  calismaSaatleri String
  konumAdres     String
  haritaUrl      String
}


